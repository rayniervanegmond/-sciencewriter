{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to sciencewriter \u00b6 A package to support writing of scientific articles by maintaining argumentation consistency combined with external reference management. The purpose of this component is to provide a library that will support the authoring of academic papers based on the argumentation development model explained in the book by Booth, Coloms and Williams (abbrev. BCW), The Craft of Research. Like many I found this book indispensible to writing solid papers but always thought that it would be great if there was an application that; like a bibliography management application, would maintain the consistency of the argumentation model for a particular paper. The objective I have for this library component is that it will help (aspiring) academic authors write better and internally consistent papers. The purpose for this component is that it will take care of the internal consistency management and (external evidence references) so that other can write application based on the BCM argumentation model. Free software: GNU General Public License v3 Documentation: https://rayniervanegmond.github.io/sciencewriter Features \u00b6 Develop the argumentation information model on which the application will be based. Develop the consistency validation feature that ensure the argmentation of the paper in sound. Develop the analysis feature that reports on missing or incomplete pieces in the argumentation. Develop the suggestion feature that uses the analysis to suggest improvements. Credits \u00b6 This package was created with Cookiecutter and the rayniervanegmond/pypackage project template.","title":"Home"},{"location":"#welcome-to-sciencewriter","text":"A package to support writing of scientific articles by maintaining argumentation consistency combined with external reference management. The purpose of this component is to provide a library that will support the authoring of academic papers based on the argumentation development model explained in the book by Booth, Coloms and Williams (abbrev. BCW), The Craft of Research. Like many I found this book indispensible to writing solid papers but always thought that it would be great if there was an application that; like a bibliography management application, would maintain the consistency of the argumentation model for a particular paper. The objective I have for this library component is that it will help (aspiring) academic authors write better and internally consistent papers. The purpose for this component is that it will take care of the internal consistency management and (external evidence references) so that other can write application based on the BCM argumentation model. Free software: GNU General Public License v3 Documentation: https://rayniervanegmond.github.io/sciencewriter","title":"Welcome to sciencewriter"},{"location":"#features","text":"Develop the argumentation information model on which the application will be based. Develop the consistency validation feature that ensure the argmentation of the paper in sound. Develop the analysis feature that reports on missing or incomplete pieces in the argumentation. Develop the suggestion feature that uses the analysis to suggest improvements.","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the rayniervanegmond/pypackage project template.","title":"Credits"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/rayniervanegmond/sciencewriter/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it. Write Documentation \u00b6 sciencewriter could always use more documentation, whether as part of the official sciencewriter docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/rayniervanegmond/sciencewriter/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up sciencewriter for local development. Fork the sciencewriter repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/sciencewriter.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv sciencewriter $ cd sciencewriter/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 sciencewriter tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/rayniervanegmond/sciencewriter/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/rayniervanegmond/sciencewriter/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"sciencewriter could always use more documentation, whether as part of the official sciencewriter docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/rayniervanegmond/sciencewriter/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up sciencewriter for local development. Fork the sciencewriter repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/sciencewriter.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv sciencewriter $ cd sciencewriter/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 sciencewriter tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/rayniervanegmond/sciencewriter/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"faq/","text":"FAQ \u00b6","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install sciencewriter, run this command in your terminal: 1 pip install sciencewriter This is the preferred method to install sciencewriter, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From sources \u00b6 The sources for sciencewriter can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/rayniervanegmond/sciencewriter","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install sciencewriter, run this command in your terminal: 1 pip install sciencewriter This is the preferred method to install sciencewriter, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-sources","text":"The sources for sciencewriter can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/rayniervanegmond/sciencewriter","title":"From sources"},{"location":"sciencewriter/","text":"sciencewriter module \u00b6 Main module for the ScienceWrite application model. ScienceWriterApp \u00b6 This class represents the application as a whole that exposes the API for other derived works to access and to manipulate the internals of the writing project. persist_information ( self ) \u00b6 This function takes the internal state of the application and persists it to a location from where it can be instantiated at a later time. Source code in sciencewriter/sciencewriter.py def persist_information ( self ): \"\"\"This function takes the internal state of the application and persists it to a location from where it can be instantiated at a later time. \"\"\" pass reload_information ( self ) \u00b6 This function takes an information state persisted at some location and it will instantiate the application based on that information. Source code in sciencewriter/sciencewriter.py def reload_information ( self ): \"\"\"This function takes an information state persisted at some location and it will instantiate the application based on that information. \"\"\" pass","title":"sciencewriter module"},{"location":"sciencewriter/#sciencewriter-module","text":"Main module for the ScienceWrite application model.","title":"sciencewriter module"},{"location":"sciencewriter/#sciencewriter.sciencewriter.ScienceWriterApp","text":"This class represents the application as a whole that exposes the API for other derived works to access and to manipulate the internals of the writing project.","title":"ScienceWriterApp"},{"location":"sciencewriter/#sciencewriter.sciencewriter.ScienceWriterApp.persist_information","text":"This function takes the internal state of the application and persists it to a location from where it can be instantiated at a later time. Source code in sciencewriter/sciencewriter.py def persist_information ( self ): \"\"\"This function takes the internal state of the application and persists it to a location from where it can be instantiated at a later time. \"\"\" pass","title":"persist_information()"},{"location":"sciencewriter/#sciencewriter.sciencewriter.ScienceWriterApp.reload_information","text":"This function takes an information state persisted at some location and it will instantiate the application based on that information. Source code in sciencewriter/sciencewriter.py def reload_information ( self ): \"\"\"This function takes an information state persisted at some location and it will instantiate the application based on that information. \"\"\" pass","title":"reload_information()"},{"location":"usage/","text":"Usage \u00b6 To use sciencewriter in a project: 1 import sciencewriter","title":"Usage"},{"location":"usage/#usage","text":"To use sciencewriter in a project: 1 import sciencewriter","title":"Usage"}]}